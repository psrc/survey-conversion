########################################
# General Configuration Settings
########################################

# Project Output Directory
output_dir = 'R:/e2projects_two/2023_base_year/2023_survey/daysim_format'

# Specify which components to run
run_locate_parcels = false
run_convert_format = true
run_data_validation = false
run_attach_skims = true

debug_person_id = []
# debug_person_id = ['1710030291']    # List of person IDs to iterate over in tour creation, empty list to process all
# debug = true
debug_tours = false
write_debug_files = true

################################################
# Parcel Location (locate_parcels.py) Config
################################################
# Load Survey Data from Elmer or use CSV
use_elmer = false
survey_year = '(2017, 2019)'

# If not using Elmer, specify CSV directory of raw survey files 
# Expected files: trip.csv, hh.csv, person.csv
survey_input_dir = 'R:/e2projects_two/2023_base_year/2017_2019_survey/elmer'

# Set parcel file location
parcel_file_dir = 'R:/e2projects_two/SoundCast/Inputs/dev/landuse/2018/rtp_2018/parcels_urbansim.txt'
parcel_maz_file_dir = 'R:/e2projects_two/activitysim/conversion/geographic_crosswalks/parcel_taz_block_lookup.csv'

# Spatial projection definitions
lat_lng_crs = 'epsg:4326'    # Survey data expected in lat/lng format
wa_state_plane_crs = 'epsg:2285'    # Projection of parcel and TAZ data; survey data is converted to this

# list of columns in "workplace" field that represent main work location as home
usual_workplace_home = ['At home (telecommute or self-employed with home office)']

# distance in feet for max allowable distance between collected XY data and acceptable land use
hh_max_dist = 2640    # half mile for distance near parcel with households
school_max_dist = 5280     # mile for distance near parcel with students

################################################
# Daysim Conversion (convert_format.py) Config
################################################

# Geolocated directory
input_dir = 'R:/e2projects_two/2023_base_year/2017_2019_survey'

################################################
# Attach Skims (attach_skims.py) Config
################################################
# Specify soundcast root directory to obtain skim values
# NOTE: network location are very slow now, recommend using local runs
run_root = 'L:/RTP_2022/final_runs/sc_rtp_2018_final/soundcast'

# Assumed travel speeds of walk and bike modes (generated from distance skims)
bike_speed = 10 # miles per hour
walk_speed = 3 # miles per hour

# Heirarchy order for tour mode, per DaySim docs: https://www.psrc.org/sites/default/files/2015psrc-modechoiceautomodels.pdf
# Drive to Transit > Walk to Transit > School Bus > HOV3+ > HOV2 > SOV > Bike > Walk > Other
mode_heirarchy = [6,8,9,5,4,3,2,1,10]

transit_mode_list = ['Ferry or water taxi',
                    'Commuter rail (Sounder, Amtrak)',
                    'Urban Rail (e.g., Link light rail, monorail)',
                    'Bus (public transit)',
                    'Other rail (e.g., streetcar)']

person_columns = [
        "hhno",
        "pno",
        "pptyp",
        "pagey",
        "pgend",
        "pwtyp",
        "pwpcl",
        "pwtaz",
        "pwautime",
        "pwaudist",
        "pstyp",
        "pspcl",
        "pstaz",
        "psautime",
        "psaudist",
        "puwmode",
        "puwarrp",
        "puwdepp",
        "ptpass",
        "ppaidprk",
        "pdiary",
        "pproxy",
        "psexpfac",
        "person_id",
    ]

hh_columns = [
        "hhno",
        "hhsize",
        "hhvehs",
        "hhwkrs",
        "hhftw",
        "hhptw",
        "hhret",
        "hhoad",
        "hhuni",
        "hhhsc",
        "hh515",
        "hhcu5",
        "hhincome",
        "hownrent",
        "hrestype",
        "hhtaz",
        "hhparcel",
        "hhexpfac",
        "samptype",
    ]

trip_columns = [
        "hhno",
        "pno",
        "tsvid",
        "day",
        "mode",
        "opurp",
        "dpurp",
        "deptm",
        "otaz",
        "opcl",
        "dtaz",
        "dpcl",
        "oadtyp",
        "dadtyp",
        "arrtm",
        "trexpfac",
        "travcost",
        "travtime",
        "travdist",
        "pathtype",
        "mode_acc",
        "dorp",
        "endacttm",
        "trip_id",
        "person_id",
    ]

tour_columns = [
        "hhno",
        "pno",
        "day",
        "tour",
        "jtindex",
        "parent",
        "subtrs",
        "pdpurp",
        "tlvorig",
        "tardest",
        "tlvdest",
        "tarorig",
        "toadtyp",
        "tdadtyp",
        "topcl",
        "totaz",
        "tdpcl",
        "tdtaz",
        "tmodetp",
        "tpathtp",
        "tautotime",
        "tautocost",
        "tautodist",
        "tripsh1",
        "tripsh2",
        "phtindx1",
        "phtindx2",
        "fhtindx1",
        "fhtindx2",
        "toexpfac",
        "person_id",
        "unique_person_id",
        "household_id_elmer",
    ]

[age_map]
'Under 5 years old' = 2
'5-11 years' = 8
'12-15 years' = 14
'16-17 years' = 17
'18-24 years' = 21
'25-34 years' = 30
'35-44 years' = 40
'45-54 years' = 50
'55-64 years' = 60
'65-74 years' = 70
'75-84 years' = 80
'85 or years older' = 85

[gender_map]
"Male" = 1
"Female" = 2
"Another" = 9
"Prefer not to answer" = 9

[pstyp_map]
'No, not a student' = 0
'Full-time student' = 1
'Part-time student' = 2

[pwtyp_map]
'hhftw' = 1
'hhptw' = 2

[pptyp_map]
'hhret' = 3
'hhoad' = 4
'hhuni' = 5
'hhhsc' = 6
'hh515' = 7
'hhcu5' = 8

[hownrent_map]
'Own/paying mortgage' = 1
'Rent' = 2
'Provided by job or military' = 3
'Prefer not to answer' = 3
'Other' = 3

[hhrestype_map]
'Single-family house (detached house)' = 1
'Townhouse (attached house)' = 2
'Building with 3 or fewer apartments/condos' = 2
'Building with 4 or more apartments/condos' = 3
'Mobile home/trailer' = 4
'Dorm or institutional housing' = 5
'Other (including boat, RV, van, etc.)' = 6

# Use the midpoint of the ranges provided since DaySim uses actual values
[income_map]
'Under $10,000' = 5000
'$10,000-$24,999' = 17500
'$25,000-$34,999' = 30000
'$35,000-$49,999' = 42500
'$50,000-$74,999' = 62500
'$75,000-$99,999' = 87500
'$100,000-$149,999' = 125000
'$150,000-$199,999' = 175000
'$200,000-$249,999' = 225000
'$250,000 or more' = 250000
'Prefer not to answer' = -1

[hhsize_map]
'1 person' = 1
'2 people' = 2
'3 people' = 3
'4 people' = 4
'5 people' = 5
'6 people' = 6
'7 people' = 7
'8 people' = 8
'9 people' = 9

[hhvehs_map]
'0 (no vehicles)' = 0
'1 vehicle' = 1
'2 vehicles' = 2
'3 vehicles' = 3
'4 vehicles' = 4
'5 vehicles' = 5
'6 vehicles' = 6
'7 vehicles' = 7
'8+ vehicles' = 8

[mode_dict]
'Walk' = 1
'Bike' = 2
'SOV' = 3
'HOV2' = 4
'HOV3+' = 5
'Transit' = 6
'School_Bus' = 8
'TNC' = 9   # Note that 9 was other in older Daysim records
'Other' = 10

# FIXME = usual commute mode should consider occupancy from observed work trips
# FIXME = usual commute transit mode should include drive to transit (assuming all walk to transit currently)
[commute_mode_dict]
'null' = 0
'Bus (public transit)' = 6
'Private bus or shuttle' = 6
'Drive alone' = 3
'Vanpool' = 5 # assume hov3
'Walk, jog, or wheelchair' = 1
'Bicycle or e-bike' = 2
'Commuter rail (Sounder, Amtrak)' = 6
'Airplane or helicopter' = 0
'Carpool with other people not in household (may also include household members)' = 5  # assume hov3
'Urban rail (Link light rail, monorail)' = 6
'Carpool ONLY with other household members' = 4   # assume HH carpool is hov2
'Other hired service (Uber, Lyft, or other smartphone-app car service)' = 9
'Motorcycle/moped/scooter' = 3
'Ferry or water taxi' = 6
'Streetcar' = 6
'Taxi (e.g., Yellow Cab)' = 9
'Paratransit' = 6
'Other (e.g. skateboard)' = 0
'Missing = Skip Logic' = 0
'Scooter or e-scooter (e.g., Lime, Bird, Razor)' = 0
'Motorcycle/moped' = 3

[day_map]
'Monday' = 1
'Tuesday' = 2
'Wednesday' = 3
'Thursday' = 4

[purpose_map]
'Went home' = 0 # home
'Went to school/daycare (e.g., daycare, K-12, college)' = 2 # school
"Dropped off/picked up someone (e.g., son at a friend's house, spouse at bus stop)" = 3 # escort
'Went to primary workplace' = 1 # work
'Went to work-related place (e.g., meeting, second job, delivery)' = 1 # work-related
'Went to other work-related activity' = 1 # work-related
'Went grocery shopping' = 5 # grocery -> shop
'Went to other shopping (e.g., mall, pet store)' = 5 # other shopping -> shop
'Other social/leisure (rMove only)' = 7 # personal business
'Went to medical appointment (e.g., doctor, dentist)' = 4 # medical is combined with personal business (4)
'Went to restaurant to eat/get take-out' = 6 # restaurant -> meal
'Attended recreational event (e.g., movies, sporting event)' = 7 # recreational is combined with social (7)
'Other purpose' = 7 # social
"Went to a family activity (e.g., child's softball game)" = 7 # recreational is combined with social (7)
'Went to religious/community/volunteer activity' = 7 # religious/community/volunteer -> social
'Attended social event (e.g., visit with friends, family, co-workers)' = 7 # family activity -> social
'Transferred to another mode of transportation (e.g., change from ferry to bus)' = 10 # change mode
'Conducted personal business (e.g., bank, post office)' = 4 # personal business
'Went to exercise (e.g., gym, walk, jog, bike ride)' = 7 # other social
'Other appointment/errands (rMove only)' = 4 # other, setting as personal business for now (4) ?

[dorp_map]
'Driver' = 1
'Passenger' = 2

# lookup for departure hour to skim times
[tod_dict]
0 = '20to5'
1 = '20to5'
2 = '20to5'
3 = '20to5'
4 = '20to5'
5 = '5to6'
6 = '6to7'
7 = '7to8'
8 = '8to9'
9 = '9to10'
10 = '10to14'
11 = '10to14'
12 = '10to14'
13 = '10to14'
14 = '14to15'
15 = '15to16'
16 = '16to17'
17 = '17to18'
18 = '18to20'
19 = '18to20'
20 = '20to5'
21 = '20to5'
22 = '20to5'
23 = '20to5'
24 = '20to5'

[purp_dict]
'wk' = 1
'sc' = 2
'es' = 3
'pb' = 4
'sh' = 5
'ml' = 6
'so' = 7
're' = 8
'me' = 9

# Create an ID to match skim naming method
[skim_mode_dict]
1 = 'walk'
2 = 'bike'
3 = 'sov'
4 = 'hov2'
5 = 'hov3'
6 = 'ivtwa'	# transit in-vehicle time
7 = 'sov'
8 = 'sov'   # assign school bus as sov
9 = 'sov'	# assign TNC/taxi as sov   # FIXME
10 = 'sov'	# assign other as sov